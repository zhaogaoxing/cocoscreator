{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        \r\n    },\r\n    \r\n    convertTo45 : function(clickEvent){\r\n        var visibleSize = cc.director.getVisibleSize();\r\n            var oldX = (clickEvent.getLocationX() - visibleSize.width/2)/64;  //正常XY单位\r\n            var oldY = (clickEvent.getLocationY() - visibleSize.height/2)/48;\r\n            \r\n            var rawNewX = (oldX + oldY);    //45度XY单位\r\n            var rawNewY = (oldX - oldY);\r\n                            \r\n          \r\n            var newX = Math.floor(rawNewX) + 1;    //截断小数\r\n            var newY = -Math.floor(-(rawNewY)) - 1;  //因为地图起始位置调的不大准 这里用 +1 -1 打了个补丁\r\n            \r\n            return {\r\n              newX : newX,\r\n              newY : newY,\r\n            };\r\n    },\r\n    \r\n    convertToPath : function(newPos, curTilePosX,curTilePosY){\r\n        \r\n        var newX = newPos.newX;\r\n        var newY = newPos.newY;\r\n        \r\n        var openList = [];          \r\n        var closeList = [];\r\n        var finalList = [];\r\n  \r\n        \r\n\r\n        var start = {\r\n            x: curTilePosX,\r\n            y: curTilePosY,\r\n            h: (Math.abs(newX) + Math.abs(newY))*10,\r\n            g: 0,\r\n            p:null,\r\n        };\r\n        start.f = start.h + start.g;\r\n        \r\n        openList.push(start);   //把起点加入 open list\r\n        \r\n\r\n        \r\n        var desTileX = start.x + newX;\r\n        var desTileY = start.y + newY;\r\n        \r\n                                //重复如下过程\r\n\r\n        while(openList.length != 0){     \r\n            \r\n        openList.sort(this._sortF);      //遍历open list  我是先排序 然后移出数组第一个元素 (数组.shift())\r\n        \r\n        var parent  = openList.shift();  //查找F值最小的节点 把它当前要处理的节点 \r\n        \r\n        closeList.push(parent);         //把这个节点移到 close list\r\n        \r\n        if(parent.h == 0){break;}\r\n            \r\n             \r\n            for(var i = -1; i <= 1; i++){   //对当前方格的8个相邻方格的每一个方格?\r\n                for(var j = -1; j <= 1; j++){\r\n                    var rawx = parent.x + i;\r\n                    var rawy = parent.y + j;\r\n                                            //如果它是不可抵达的或者它在close list中， 忽略它\r\n                    if(this._hadInCloseList(rawx, rawy, closeList)){/*比较G值换P 返回*/ continue;}\r\n                    var neibour = {\r\n                        x: rawx,\r\n                        y: rawy,\r\n                        h: Math.max(Math.abs(rawx - desTileX),Math.abs(rawy - desTileY))*10,\r\n                        g: parent.g + ((i != 0 && j != 0) ? 14 : 10),  \r\n                        p: parent,\r\n                    }\r\n                    \r\n                    neibour.f = neibour.h + neibour.g;\r\n                    \r\n                    openList.push(neibour); //如果它不在 open list中 把它加入 open list, \r\n                                //并且把当前方格设置为它的父亲，记录该方格的 F, G 和 H 值(在上面for里做了)\r\n                                \r\n                                //如果它已经在 open list 中，\r\n                                //检查这条路径（即经由当前方格到达它那里）是否更好，\r\n                                //用 G 值作参考。更小的 G 值表示这是更好的路径。\r\n                                //如果是这样，把它的父亲设置为当前方格，\r\n                                //并重新计算它的 G 和 F 值。\r\n                                //如果你的 open list 是按 F 值排序的话，\r\n                                //改变后你可能需要重新排序。 (这部分还没有实现 等3月份tileMap出来再加)\r\n                }\r\n            }                   //停止，当你\r\n\r\n                                //把终点加入到了 open list 中，此时路径已经找到了，或者 (while下第四行 终点的h为0)\r\n\r\n                                //查找终点失败，并且 open list 是空的，此时没有路径。(看while条件)\r\n            \r\n            \r\n            \r\n            \r\n        }\r\n        \r\n        \r\n        \r\n        var des = closeList.pop();  //保存路径。从终点开始，\r\n       \r\n        while(des.p){                   //每个方格沿着父节点移动直至起点，这就是你的路径。(我放到了单独的finalList中)\r\n            des.dx = des.x - des.p.x;\r\n            des.dy = des.y - des.p.y;\r\n            finalList.unshift(des);\r\n            des = des.p;\r\n        };\r\n        \r\n        return finalList;\r\n\r\n    },\r\n    \r\n    _hadInCloseList : function(x, y, closeList){\r\n        for(var item of closeList){\r\n            if(item.x == x && item.y == y) return true;\r\n        }\r\n        return false;\r\n    },\r\n    \r\n    _sortF : function(a,b){\r\n        return a.f - b.f;\r\n    },\r\n    \r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n});\r\n"
  ]
}